<?xml version="1.0" encoding="UTF-8"?>
<Container version="2">
  <TemplateURL>https://raw.githubusercontent.com/linuxserver/docker-templates/master/linuxserver.io/swag.xml</TemplateURL>
  <Name>swag</Name>
  <Repository>linuxserver/swag</Repository>
  <Registry>https://hub.docker.com/r/linuxserver/swag/</Registry>
  <Network>bridge</Network>
  <Privileged>false</Privileged>
  <Project>https://docs.linuxserver.io/general/swag</Project>
  <Support>https://forums.unraid.net/topic/51808-support-linuxserverio-swag-secure-web-application-gateway-nginxphpcertbotfail2ban/</Support>
  <Overview>SWAG - Secure Web Application Gateway is a rebirth of our letsencrypt docker image, a full fledged web server and reverse proxy that includes Nginx, Php7, Certbot (Let's Encrypt client) and Fail2ban.&#13;
  &#13;
  Before running this container, make sure that the url and subdomains are properly forwarded to this container's host.&#13;
  &#13;
  - Port 443 on the internet side of the router should be forwarded to this container's port 443.&#13;
  - If you need a dynamic dns provider, you can use the free provider duckdns.org where the url will be yoursubdomain.duckdns.org and the subdomains can be "www,ftp,cloud," or "wildcard" if using duckdns validation&#13;
  - The container detects changes to url and subdomains, revokes existing certs and generates new ones during start. &#13;
  &#13;
  - If you'd like to password protect your sites, you can use htpasswd. Run the following command on your host to generate the htpasswd file docker exec -it swag htpasswd -c /config/nginx/.htpasswd &amp;lt;username&amp;gt;</Overview>
  <WebUI>https://[IP]:[PORT:443]</WebUI>
  <Icon>https://raw.githubusercontent.com/linuxserver/docker-templates/master/linuxserver.io/img/linuxserver-ls-logo.png</Icon>
  <ExtraParams>--cap-add=NET_ADMIN</ExtraParams>
  <PostArgs></PostArgs>
  <CPUset></CPUset>
  <DonateText>Donations</DonateText>
  <DonateLink>https://www.linuxserver.io/donations/</DonateLink>
  <DonateImg>https://raw.githubusercontent.com/linuxserver/docker-templates/master/linuxserver.io/img/donate.png</DonateImg>
  <Networking>
    <Mode>bridge</Mode>
    <Publish>
      <Port>
        <HostPort></HostPort>
        <ContainerPort>80</ContainerPort>
        <Protocol>tcp</Protocol>
      </Port>
      <Port>
        <HostPort></HostPort>
        <ContainerPort>443</ContainerPort>
        <Protocol>tcp</Protocol>
      </Port>
    </Publish>
  </Networking>
  <Data>
    <Volume>
      <HostDir></HostDir>
      <ContainerDir>/config</ContainerDir>
      <Mode>rw</Mode>
    </Volume>
  </Data>
  <Environment>
    <Variable>
      <Value></Value>
      <Name>EMAIL</Name>
    </Variable>
    <Variable>
      <Value></Value>
      <Name>URL</Name>
    </Variable>
    <Variable>
      <Value></Value>
      <Name>SUBDOMAINS</Name>
    </Variable>
    <Variable>
      <Value></Value>
      <Name>ONLY_SUBDOMAINS</Name>
    </Variable>
    <Variable>
      <Value>99</Value>
      <Name>PUID</Name>
    </Variable>
    <Variable>
      <Value>100</Value>
      <Name>PGID</Name>
    </Variable>
    <Variable>
      <Value></Value>
      <Name>VALIDATION</Name>
    </Variable>
    <Variable>
      <Value></Value>
      <Name>DNSPLUGIN</Name>
      <Mode></Mode>
    </Variable>
    <Variable>
      <Value></Value>
      <Name>STAGING</Name>
      <Mode></Mode>
    </Variable>
    <Variable>
      <Value></Value>
      <Name>EXTRA_DOMAINS</Name>
      <Mode></Mode>
    </Variable>
    <Variable>
      <Value></Value>
      <Name>DUCKDNSTOKEN</Name>
      <Mode></Mode>
    </Variable>
    <Variable>
      <Value></Value>
      <Name>PROPAGATION</Name>
      <Mode></Mode>
    </Variable>
  </Environment>
  <Config Name="http" Target="80" Default="" Mode="tcp" Description="Container Port: 80" Type="Port" Display="always" Required="false" Mask="false">80</Config>
  <Config Name="https" Target="443" Default="" Mode="tcp" Description="Container Port: 443" Type="Port" Display="always" Required="false" Mask="false">443</Config>
  <Config Name="Email" Target="EMAIL" Default="" Mode="" Description="Your e-mail address for cert registration" Type="Variable" Display="always" Required="false" Mask="false"></Config>
  <Config Name="Domain Name" Target="URL" Default="" Mode="" Description="the top url you have control over customdomain.com if you own it, or customsubdomain.ddnsprovider.com if using dynamic dns)" Type="Variable" Display="always" Required="true" Mask="false"></Config>
  <Config Name="Subdomain(s)" Target="SUBDOMAINS" Default="" Mode="" Description="Subdomains you'd like the cert to cover (comma separated, no spaces) ie. www,ftp,cloud," Type="Variable" Display="always" Required="false" Mask="false">www,</Config>
  <Config Name="Only Subdomains" Target="ONLY_SUBDOMAINS" Default="" Mode="" Description="if you wish to get certs only for certain subdomains, but not the main domain (main domain may be hosted on another machine and cannot be validated), set this to true" Type="Variable" Display="always" Required="false" Mask="false">false</Config>
  <Config Name="PUID" Target="PUID" Default="" Mode="" Description="UID for permissions.  Do not change unless you know what you're doing." Type="Variable" Display="advanced-hide" Required="true" Mask="false">99</Config>
  <Config Name="PGID" Target="PGID" Default="" Mode="" Description="GID for permissions.  Do not change unless you know what you're doing." Type="Variable" Display="advanced-hide" Required="true" Mask="false">100</Config>
  <Config Name="Validation" Target="VALIDATION" Default="" Mode="" Description="Flag to specify validation method use either 'http','dns' or 'tls-sni'" Type="Variable" Display="always" Required="true" Mask="false">http</Config>
  <Config Name="DNS-Plugin" Target="DNSPLUGIN" Default="" Mode="" Description="DNS plugin to use if using DNS validation" Type="Variable" Display="always" Required="false" Mask="false"></Config>
  <Config Name="AppData Config Path" Target="/config" Default="" Mode="rw" Description="Container Path: /config" Type="Path" Display="always" Required="true" Mask="false"></Config>
  <Config Name="Extra Domains" Target="EXTRA_DOMAINS" Default="" Mode="" Description="Additional domains/subdomains you'd like the cert to cover (comma separated, no spaces) ie. domain2.com,*.domain2.com" Type="Variable" Display="always" Required="false" Mask="false"></Config>
  <Config Name="Staging" Target="STAGING" Default="" Mode="" Description="When set to true, it significantly increases Let's Encrypt throttle thresholds, but produces non-validated certs, ideal for testing validation changes" Type="Variable" Display="always" Required="false" Mask="false">false</Config>
  <Config Name="DuckDNS Token" Target="DUCKDNSTOKEN" Default="" Mode="" Description="If using duckdns validation, enter the DuckDNS token here" Type="Variable" Display="always" Required="false" Mask="false"></Config>
  <Config Name="Propagation" Target="PROPAGATION" Default="" Mode="" Description="Optionally override (in seconds) the default propagation time for the dns plugins" Type="Variable" Display="always" Required="false" Mask="false"></Config>
  <Category>Tools:Utilities Network:Web</Category>
  <Description>SWAG - Secure Web Application Gateway is a rebirth of our letsencrypt docker image, a full fledged web server and reverse proxy that includes Nginx, Php7, Certbot (Let's Encrypt client) and Fail2ban.&#13;
  &#13;
  Before running this container, make sure that the url and subdomains are properly forwarded to this container's host.&#13;
  &#13;
  - Port 443 on the internet side of the router should be forwarded to this container's port 443.&#13;
  - If you need a dynamic dns provider, you can use the free provider duckdns.org where the url will be yoursubdomain.duckdns.org and the subdomains can be "www,ftp,cloud," or "wildcard" if using duckdns validation&#13;
  - The container detects changes to url and subdomains, revokes existing certs and generates new ones during start. &#13;
  &#13;
  - If you'd like to password protect your sites, you can use htpasswd. Run the following command on your host to generate the htpasswd file docker exec -it swag htpasswd -c /config/nginx/.htpasswd</Description>
  <templatePath>/tmp/GitHub/AppFeed/templates/linuxserversRepository/linuxserver.io/swag.xml</templatePath>
</Container>
